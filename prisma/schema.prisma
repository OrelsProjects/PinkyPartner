// ## App description
// This app is meant for people who want to have a training contract with their pal, so they will stick to training.
// The app will allow users to create a contract, add obligations and sign up on it.

// An obligation has:
// A title and a description.
// Each contract-bound obligation has a due date/interval+amount of times to interval, so the users will have their contract timed.

// A contract has:
// A due date, obligations, 2+ signatures from 2 different users.
// Each user can either terminate the contract and by doing that it will be finished for the both of them.
// Termination is modeled in the db, to know who did it and why.

// A user can checkmark an obligation as done (Or recheck it to undo it) and that will send a notification to all those who partake in the contract.

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model AppUser {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  userId      String  @unique
  email       String  @unique
  displayName String?
  photoURL    String?

  @@map("appUser")
}

model Obligation {
  obligationId String  @id @default(auto()) @map("_id") @db.ObjectId
  title        String
  userId       String
  emoji        String?
  description  String?
  repeat       String // "Daily" | "Weekly"
  days         Int[]   @default([])
  timesAWeek   Int?

  contractObligation ContractObligation[]

  @@map("obligation")
}

model Contract {
  contractId    String   @id @default(auto()) @map("_id") @db.ObjectId
  title         String
  description   String?
  dueDate       DateTime
  obligationIds String[] @default([])
  signatures    String[]

  userContract       UserContract[]
  contractObligation ContractObligation[]

  @@map("contract")
}

model ContractObligation {
  contractObligationId String   @id @default(auto()) @map("_id") @db.ObjectId
  contractId           String   @db.ObjectId
  obligationId         String   @db.ObjectId
  dueDate              DateTime // The due date for the obligation

  contract   Contract   @relation(fields: [contractId], references: [contractId])
  obligation Obligation @relation(fields: [obligationId], references: [obligationId])

  @@map("contractObligation")
}

model UserContract {
  userContractId    String   @id @default(auto()) @map("_id") @db.ObjectId
  contractId        String   @db.ObjectId
  userId            String
  signed            Boolean
  terminated        Boolean
  terminationReason String?
  contract          Contract @relation(fields: [contractId], references: [contractId])

  @@map("userContract")
}
