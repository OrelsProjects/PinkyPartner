// ## App description
// This app is meant for people who want to have a training contract with their pal, so they will stick to training.
// The app will allow users to create a contract, add obligations and sign up on it.

// An obligation has:
// A title and a description.
// Each contract-bound obligation has a due date/interval+amount of times to interval, so the users will have their contract timed.

// A contract has:
// A due date, obligations, 2+ signatures from 2 different users.
// Each user can either terminate the contract and by doing that it will be finished for the both of them.
// Termination is modeled in the db, to know who did it and why.

// A user can checkmark an obligation as done (Or recheck it to undo it) and that will send a notification to all those who partake in the contract.

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model AppUser {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  userId      String  @unique
  email       String  @unique
  password    String?
  displayName String?
  photoURL    String?

  createdAt DateTime? @default(now())

  userContracts      UserContract[]
  // on delete cascade
  Obligation         Obligation[]
  Contract           Contract[]
  meta               AppUserMetadata?
  ContractObligation UserContractObligation[]
  settings           AppUserSettings?

  nudgesReceived Nudges[] @relation(name: "nudgesReceived")
  nudgesSent     Nudges[] @relation(name: "nudgesSent")

  @@map("appUser")
}

// If you change anything here, change also in:
// AuthProvider, authOptions, next-auth.d.ts
model AppUserMetadata {
  appUserMetadataId String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @unique
  referralCode      String? @unique
  referredBy        String?

  pushToken       String?
  pushTokenMobile String?

  onboardingCompleted Boolean @default(false)

  appUser AppUser @relation(fields: [userId], references: [userId], onDelete: Cascade)

  @@map("appUserMetadata")
}

model AppUserSettings {
  appUserSettingsId String @id @default(auto()) @map("_id") @db.ObjectId
  userId            String @unique

  showNotifications Boolean @default(true)
  soundEffects      Boolean @default(true)

  updatedAt DateTime? @default(now())

  appUser AppUser @relation(fields: [userId], references: [userId], onDelete: Cascade)

  @@map("appUserSettings")
}

model Obligation {
  obligationId String  @id @default(auto()) @map("_id") @db.ObjectId
  userId       String
  title        String
  emoji        String?
  description  String?
  repeat       String // "Daily" | "Weekly"
  days         Int[]   @default([])
  timesAWeek   Int?

  appUser             AppUser                  @relation(fields: [userId], references: [userId], onDelete: Cascade)
  contractObligations UserContractObligation[]
  ContractObligation  ContractObligation[]

  @@map("obligation")
}

model Contract {
  contractId  String   @id @default(auto()) @map("_id") @db.ObjectId
  creatorId   String
  title       String
  description String?
  dueDate     DateTime
  createdAt   DateTime @default(now())

  appUser                 AppUser                  @relation(fields: [creatorId], references: [userId], onDelete: Cascade)
  userContractObligations UserContractObligation[]
  userContracts           UserContract[]
  contractObligations     ContractObligation[]

  @@map("contract")
}

model UserContract {
  userContractId String    @id @default(auto()) @map("_id") @db.ObjectId
  userId         String
  contractId     String    @db.ObjectId
  signedAt       DateTime?
  viewedAt       DateTime? // If the user has seen his new contract

  optOutOn DateTime?

  appUser  AppUser  @relation(fields: [userId], references: [userId], onDelete: Cascade)
  contract Contract @relation(fields: [contractId], references: [contractId], onDelete: Cascade)

  @@map("userContracts")
}

// This is to know which obligations are in which contracts, to create for the user.
model ContractObligation {
  contractObligationId String @id @default(auto()) @map("_id") @db.ObjectId
  contractId           String @db.ObjectId
  obligationId         String @db.ObjectId

  contract   Contract   @relation(fields: [contractId], references: [contractId], onDelete: Cascade)
  obligation Obligation @relation(fields: [obligationId], references: [obligationId], onDelete: Cascade)

  @@map("contractObligations")
}

// This will populate all the obligations of all the users.
model UserContractObligation {
  userContractObligationId String    @id @default(auto()) @map("_id") @db.ObjectId
  userId                   String
  obligationId             String    @db.ObjectId
  contractId               String    @db.ObjectId
  dueDate                  Int? // If it's weekly, there is no due date.
  completedAt              Int?
  viewedAt                 DateTime? // If the partner saw his partner's completion
  createdAt                DateTime  @default(now())

  appUser    AppUser    @relation(fields: [userId], references: [userId], onDelete: Cascade)
  contract   Contract   @relation(fields: [contractId], references: [contractId], onDelete: Cascade)
  obligation Obligation @relation(fields: [obligationId], references: [obligationId], onDelete: Cascade)

  @@map("userContractObligations")
}

model Nudges {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  userNudgerId String
  userNudgedId String
  nudgedAt     DateTime @default(now())

  nudgerUser AppUser @relation(fields: [userNudgerId], references: [userId], onDelete: Cascade, name: "nudgesSent")
  nudgedUser AppUser @relation(fields: [userNudgedId], references: [userId], onDelete: Cascade, name: "nudgesReceived")

  @@map("nudges")
}
